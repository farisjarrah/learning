help:
	@echo "===> To run any program run: make <filename-without-c-extension>"

all: ch3 ch4 ch5 ch6 ch7

ch3: hello hello-variation bool ternary sizeof flow while-loop do-while-loop do-while-loop-2 while-rand for-loop switch-case

hello:
	@echo "===> Compiling hello"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/hello" ch3/hello.c
	@echo "===> Running hello"
	./bin/hello
	@echo "===> Cleaning up hello"
	rm bin/hello

hello-variation:
	@echo "===> Compiling hello-variation"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/hello-variation" ch3/hello-variation.c
	@echo "===> Running hello-variation"
	./bin/hello-variation
	@echo "===> Cleaning up hello-variation"
	rm bin/hello-variation

bool:
	@echo "===> Compiling bool"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/bool" ch3/bool.c
	@echo "===> Running bool"
	./bin/bool
	@echo "===> Cleaning up bool"
	rm bin/bool

ternary:
	@echo "===> Compiling ternary"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/ternary" ch3/ternary.c
	@echo "===> Running ternary"
	./bin/ternary
	@echo "===> Cleaning up ternary"
	rm bin/ternary

sizeof:
	@echo "===> Compiling sizeof"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/sizeof" ch3/sizeof.c
	@echo "===> Running sizeof"
	./bin/sizeof
	@echo "===> Cleaning up sizeof"
	rm bin/sizeof

flow:
	@echo "===> Compiling flow"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/flow" ch3/flow.c
	@echo "===> Running flow"
	./bin/flow
	@echo "===> Cleaning up flow"
	rm bin/flow

while-loop:
	@echo "===> Compiling while-loop"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/while-loop" ch3/while-loop.c
	@echo "===> Running while-loop"
	./bin/while-loop
	@echo "===> Cleaning up while-loop"
	rm bin/while-loop

while-rand:
	@echo "===> Compiling while-rand"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/while-rand" ch3/while-rand.c
	@echo "===> Running while-rand"
	./bin/while-rand
	@echo "===> Cleaning up while-rand"
	rm bin/while-rand

do-while-loop:
	@echo "===> Compiling do-while-loop"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/do-while-loop" ch3/do-while-loop.c
	@echo "===> Running do-while-loop"
	./bin/do-while-loop
	@echo "===> Cleaning up do-while-loop"
	rm bin/do-while-loop

do-while-loop-2:
	@echo "===> Compiling do-while-loop-2"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/do-while-loop-2" ch3/do-while-loop-2.c
	@echo "===> Running do-while-loop-2"
	./bin/do-while-loop-2
	@echo "===> Cleaning up do-while-loop-2"
	rm bin/do-while-loop-2

for-loop:
	@echo "===> Compiling for-loop"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/for-loop" ch3/for-loop.c
	@echo "===> Running for-loop"
	./bin/for-loop
	@echo "===> Cleaning up for-loop"
	rm bin/for-loop

switch-case:
	@echo "===> Compiling switch-case"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/switch-case" ch3/switch-case.c
	@echo "===> Running switch-case"
	./bin/switch-case
	@echo "===> Cleaning up switch-case"
	rm bin/switch-case

ch4: funcs passing-by-value func-proto empty-param-list

funcs:
	@echo "===> Compiling funcs"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/funcs" ch4/funcs.c
	@echo "===> Running funcs"
	./bin/funcs
	@echo "===> Cleaning up funcs"
	rm bin/funcs

passing-by-value:
	@echo "===> Compiling passing-by-value"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/passing-by-value" ch4/passing-by-value.c
	@echo "===> Running passing-by-value"
	./bin/passing-by-value
	@echo "===> Cleaning up passing-by-value"
	rm bin/passing-by-value

func-proto:
	@echo "===> Compiling func-proto"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/func-proto" ch4/func-proto.c
	@echo "===> Running func-proto"
	./bin/func-proto
	@echo "===> Cleaning up func-proto"
	rm bin/func-proto

empty-param-list:
	@echo "===> Compiling empty-param-list"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/empty-param-list" ch4/empty-param-list.c
	@echo "===> Running empty-param-list"
	./bin/empty-param-list
	@echo "===> Cleaning up empty-param-list"
	rm bin/empty-param-list

ch5: mem-and-vars pointer-types dereferencing pointers-as-args null-pointer

mem-and-vars:
	@echo "===> Compiling mem-and-vars"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/mem-and-vars" ch5/mem-and-vars.c
	@echo "===> Running mem-and-vars"
	./bin/mem-and-vars
	@echo "===> Cleaning up mem-and-vars"
	rm bin/mem-and-vars

pointer-types:
	@echo "===> Compiling pointer-types"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/pointer-types" ch5/pointer-types.c
	@echo "===> Running pointer-types"
	./bin/pointer-types
	@echo "===> Cleaning up pointer-types"
	rm bin/pointer-types
	
dereferencing:
	@echo "===> Compiling dereferencing"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/dereferencing" ch5/dereferencing.c
	@echo "===> Running dereferencing"
	./bin/dereferencing
	@echo "===> Cleaning up dereferencing"
	rm bin/dereferencing

pointers-as-args:
	@echo "===> Compiling pointers-as-args"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/pointers-as-args" ch5/pointers-as-args.c
	@echo "===> Running pointers-as-args"
	./bin/pointers-as-args
	@echo "===> Cleaning up pointers-as-args"
	rm bin/pointers-as-args
		
null-pointer:
	@echo "===> Compiling null-pointer"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/null-pointer" ch5/null-pointer.c
	@echo "===> Running null-pointer"
	./bin/null-pointer
	@echo "===> Cleaning up null-pointer"
	rm bin/null-pointer

ch6: easy-arr arr-length arr-initializer out-of-bounds multidimensional-arr pointer-to-array pass-arr-to-func change-arr-in-func multidimensional-arr-to-func

easy-arr:
	@echo "===> Compiling easy-arr"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/easy-arr" ch6/easy-arr.c
	@echo "===> Running easy-arr"
	./bin/easy-arr
	@echo "===> Cleaning up easy-arr"
	rm bin/easy-arr

arr-length:
	@echo "===> Compiling arr-length"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/arr-length" ch6/arr-length.c
	@echo "===> Running arr-length"
	./bin/arr-length
	@echo "===> Cleaning up arr-length"
	rm bin/arr-length
	
arr-initializer:
	@echo "===> Compiling arr-initializer"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/arr-initializer" ch6/arr-initializer.c
	@echo "===> Running arr-initializer"
	./bin/arr-initializer
	@echo "===> Cleaning up arr-initializer"
	rm bin/arr-initializer

out-of-bounds:
	@echo "===> Compiling out-of-bounds"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/out-of-bounds" ch6/out-of-bounds.c
	@echo "===> Running out-of-bounds"
	./bin/out-of-bounds
	@echo "===> Cleaning up out-of-bounds"
	rm bin/out-of-bounds

multidimensional-arr:
	@echo "===> Compiling multidimensional-arr"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/multidimensional-arr" ch6/multidimensional-arr.c
	@echo "===> Running multidimensional-arr"
	./bin/multidimensional-arr
	@echo "===> Cleaning up multidimensional-arr"
	rm bin/multidimensional-arr

pointer-to-array:
	@echo "===> Compiling pointer-to-array"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/pointer-to-array" ch6/pointer-to-array.c
	@echo "===> Running pointer-to-array"
	./bin/pointer-to-array
	@echo "===> Cleaning up pointer-to-array"
	rm bin/pointer-to-array

pass-arr-to-func:
	@echo "===> Compiling pass-arr-to-func"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/pass-arr-to-func" ch6/pass-arr-to-func.c
	@echo "===> Running pass-arr-to-func"
	./bin/pass-arr-to-func
	@echo "===> Cleaning up pass-arr-to-func"
	rm bin/pass-arr-to-func

change-arr-in-func:
	@echo "===> Compiling change-arr-in-func"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/change-arr-in-func" ch6/change-arr-in-func.c
	@echo "===> Running change-arr-in-func"
	./bin/change-arr-in-func
	@echo "===> Cleaning up change-arr-in-func"
	rm bin/change-arr-in-func

multidimensional-arr-to-func:
	@echo "===> Compiling multidimensional-arr-to-func"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/multidimensional-arr-to-func" ch6/multidimensional-arr-to-func.c
	@echo "===> Running multidimensional-arr-to-func"
	./bin/multidimensional-arr-to-func
	@echo "===> Cleaning up multidimensional-arr-to-func"
	rm bin/multidimensional-arr-to-func

ch7: string-literal my-strlen use-strcpy

string-literal:
	@echo "===> Compiling string-literal"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/string-literal" ch7/string-literal.c
	@echo "===> Running string-literal"
	./bin/string-literal
	@echo "===> Cleaning up string-literal"
	rm bin/string-literal

my-strlen:
	@echo "===> my-strlen"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/my-strlen" ch7/my-strlen.c
	@echo "===> Running my-strlen"
	./bin/my-strlen
	@echo "===> Cleaning up my-strlen"
	rm bin/my-strlen

use-strcpy:
	@echo "===> use-strcpy"
	gcc -Wall -Wextra -std=c2x -pedantic -o "bin/use-strcpy" ch7/use-strcpy.c
	@echo "===> Running use-strcpy"
	./bin/use-strcpy
	@echo "===> Cleaning up use-strcpy"
	rm bin/use-strcpy

